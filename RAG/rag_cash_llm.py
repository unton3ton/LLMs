# pip install peft transformers langchain torch sentencepiece --no-cache-dir
# pip install protobuf tiktoken blobfile 

# https://github.com/akocherovskiy/LLM_chat-bot_RAG_approach/blob/main/rag_llm_with_cache.py
# https://habr.com/ru/articles/769124/
# https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D1%8D%D1%84%D1%84%D0%B8%D1%86%D0%B8%D0%B5%D0%BD%D1%82_%D0%9E%D1%82%D0%B8%D0%B0%D0%B8

import torch
from peft import AutoPeftModelForCausalLM
from transformers import AutoTokenizer, AutoModel
import torch.nn.functional as F
from langchain.prompts import PromptTemplate

adapt_model_name = "IlyaGusev/saiga_mistral_7b_lora"
base_model_name = "Open-Orca/Mistral-7B-OpenOrca"

tokenizer = AutoTokenizer.from_pretrained(
              base_model_name,
              trust_remote_code=True)

tokenizer.pad_token = tokenizer.eos_token
device_map = {"": 0}

model = AutoPeftModelForCausalLM.from_pretrained(
              adapt_model_name,
              device_map=device_map,
              torch_dtype=torch.bfloat16)

# Load model from HuggingFace Hub
sent_tokenizer = AutoTokenizer.from_pretrained('sentence-transformers/all-MiniLM-L6-v2')
sent_model = AutoModel.from_pretrained('sentence-transformers/all-MiniLM-L6-v2')

#функция для получения эмбеддингов. На вход подаём строку, на выходе получаем torch.tensor размерностью (1, 384):
def get_embedding(sentence):
    #Mean Pooling - Take attention mask into account for correct averaging
    def _mean_pooling(model_output, attention_mask):
        token_embeddings = model_output[0] #First element of model_output contains all token embeddings
        input_mask_expanded = attention_mask.unsqueeze(-1).expand(token_embeddings.size()).float()
        return torch.sum(token_embeddings * input_mask_expanded, 1) / torch.clamp(input_mask_expanded.sum(1), min=1e-9)

    # Tokenize sentences
    encoded_input = sent_tokenizer([sentence], padding=True, truncation=True, return_tensors='pt')

    # Compute token embeddings
    with torch.no_grad():
        model_output = sent_model(**encoded_input)

    # Perform pooling
    sentence_embeddings = _mean_pooling(model_output, encoded_input['attention_mask'])

    # Normalize embeddings
    sentence_embeddings = F.normalize(sentence_embeddings, p=2, dim=1)

    return sentence_embeddings

answers = []
emb_database = torch.empty((0, 384), dtype=torch.float32)

'''
Обернём промт в PromptTemplate из библиотеки langchain. Это аналог f-строки, 
только с возможностью передавать строку, как зависимую переменную, с последующей передачей ей аргумента.
'''

info_prompt_less10 = PromptTemplate.from_template("user: Небольшой свечной завод, расположенный по адресу ул. Ленина 22, \
    находится в городе Градск. Доехать до завода от центрального автовокзала можно на автобусе номер 666. Завод специализируется \
    на производстве свечей различных размеров и форм. Открытая вакансия: Производственный работник - зарплата 150 тысяч рублей в месяц. \
    Требования: 6 разряд свечника, 25 лет опыта. Претендент на работу должен заполнить анкету, предоставить резюме, пройти собеседование \
    с представителями компании. Для работников завода предусмотрены следующие бонусы: Медицинское страхование, Абонемент в бассейн. \
    Завод активно проводит праздничные мероприятия и игры. {question}\nbot: Вот ответ на ваш вопрос длиной не более 10 слов:")

#функци для генерации ответа моделью и парсинг ответа:
def get_answer(info_prompt, question):
    
    prompt = info_prompt.format(question=question)   
    inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
    outputs = model.generate(input_ids=inputs["input_ids"].to("cuda"), 
                            top_p=0.5,
                            temperature=0.3,
                            attention_mask=inputs["attention_mask"],
                            max_new_tokens=50,
                            pad_token_id=tokenizer.eos_token_id,
                            do_sample=True)

    output = tokenizer.decode(outputs[0], skip_special_tokens=True)

    parsed_answer = output.split("Вот ответ на ваш вопрос длиной не более 10 слов:")[1].strip()

    if "bot:" in parsed_answer:
        parsed_answer = parsed_answer.split("bot:")[0].strip()

    return parsed_answer

# Пайплайн:

# 1. Создаём ембеддинг вопроса:

question = "Каких работников вы ищете?" 
emb = get_embedding(question)
print(f'embedding(question) = \n{emb}')
print(emb.size())

# 2. Считаем косинусный коэффициент (Коэффициент Отиаи) между эмбеддингом вопроса и эмбеддингами, которые лежат в базе:

def get_cos_sim(question):
    cos_sim = F.cosine_similarity(emb_database, emb, dim=1, eps=1e-8)
    return cos_sim
  
print(get_cos_sim(question))

# 3. Получаем ответ от модели, добавляем ембеддинг вопроса в базу ембеддингов, а ответ - в массив answers.

answer = get_answer(info_prompt_less10, question)
emb_database = torch.cat((emb_database, emb), 0)
answers.append(answer)
print(f'Answer from model: {answer}')

# Зададим ещё один вопрос и посмотрим коэффициент Отиаи:

question = "Где находится ваш завод?" 
emb = get_embedding(question)
cos_sim = get_cos_sim(question)
print(cos_sim)

# Сгенерируем ответ:

answer = get_answer(info_prompt_less10, question)
emb_database = torch.cat((emb_database, emb), 0)
answers.append(answer)
print(f'Answer from model: {answer}')

# Зададим вопрос, похожий на предыдущий и посчитаем коэффициент Отиаи:

question = "Где расположен ваш завод?" 
emb = get_embedding(question)
cos_sim = get_cos_sim(question)
# answer = get_answer(info_prompt_less10, question)

# Здесь мы уже видим, что один из ранее задаваемых вопрос похож на новый вопрос.

print(f'{cos_sim} {answers=}')


# цикл, имитирующий запросы к нашему боту.

questions = [
    "Какой адрес вашего завода?",
    "Где находится ваш завод?",
    "Какое местоположение вашего завода?",
    "Где точно находится ваш завод?",
    "Как добраться до вашего завода?",
    "Как мне добраться до вашего завода?",
    "На каком автобусе добраться до вашего завода?",
    "Какие автобусы едут до вашего завода?",
    "Что производят на вашем заводе?",
    "Какая продукция производится на вашем заводе?",
    "Какие товары производятся на вашем заводе?",
    "Что именно производится на вашем заводе?",
    "Какие изделия производятся на вашем заводе?",
    "Какую продукцию я могу найти на вашем заводе?",
    "Какик работники вам нужны?",
    "Какие должности вы ищете?",
    "Какие работники вам нужны в данный момент?",
    "Какие специалисты вам требуются?",
    "Какие специалисты вам необходимы?",
    "Какими навыками и умениями должен обладать специалист?",
    "Какие компетенции и знания необходимы специалисту?",
    "Какими навыками и качествами должен владеть специалист для успешного выполнения работы?",
    "Какие специфические умения и опыт требуются у специалиста?",
    "Сколько платят на этой должности?",
    "Какова зарплата для этой должности?",
    "Какая заработная плата предлагается на этой позиции?",
    "Какие условия оплаты труда установлены для этой работы?",
    "Какие варианты и размеры заработной платы доступны для этой должности?",
    "Какая зарплата ожидается для новых сотрудников на этой позиции?",
    "Как устроиться?",
    "Как можно устроиться к вам на работу?",
    "Какой процесс приема?",
    "Какой процесс приема на работу на вашем заводе?",
    "Как я могу подать заявку на работу на вашем заводе?",
    "Какие шаги мне нужно предпринять, чтобы устроиться к вам на завод?",
    "Какие документы и информацию мне необходимо предоставить для трудоустройства на вашем заводе?",
    "Какие дополнительные льготы и привилегии предоставляются?",
    "Какие бонусы и вознаграждения доступны для сотрудников?",
    "Какие дополнительные преимущества и поощрения предусмотрены?",
    "Какие бонусные программы и возможности для получения дополнительных выгод имеются?",
    "Какие дополнительные бонусы и компенсации предлагаются в рамках трудовых условий?"
]

for q in questions:
    print(q)
    emb = get_embedding(q)
    cos_sim = get_cos_sim(q)
    max_value, max_index = torch.max(get_cos_sim(q), dim=0)

    if max_value > 0.83:
        answer = answers[max_index]
        print(f'DATABASE: {answer}\n')
        print(f'{cos_sim} {answers=}')
    else:
        answer = get_answer(info_prompt_less10, q)
        emb_database = torch.cat((emb_database, emb), 0)
        answers.append(answer)
        print(f'MODEL: {answer}\n')
        print(f'{cos_sim} {answers=}')
    print('\n\n')

"""
embedding(question) = 
tensor([[ 2.5110e-02,  5.1584e-03, -6.1138e-02, -1.9740e-02, -4.8976e-02,
          5.2548e-02,  1.1428e-01,  1.3328e-01, -2.0873e-02, -6.2296e-02,
         -2.0364e-03,  3.7444e-02,  1.4026e-02,  8.9859e-02, -1.1850e-02,
          6.5547e-03, -6.0300e-03, -1.9409e-03,  1.1191e-02,  2.6632e-02,
         -2.8001e-02, -3.1463e-02,  5.4731e-02,  1.0286e-01, -5.3319e-03,
         -4.4906e-03,  2.8889e-02, -1.7661e-02,  4.1668e-02,  1.5056e-02,
         -2.3516e-04, -2.2797e-02,  1.1825e-02, -7.4655e-03,  3.4711e-02,
          6.5602e-05, -1.1831e-02,  1.7795e-02,  5.8787e-02,  2.8625e-02,
         -4.6337e-02, -7.2969e-02, -7.6595e-02,  8.9365e-02,  1.0229e-02,
          1.1044e-01, -4.5784e-02,  6.8167e-03,  3.7613e-02, -1.0416e-02,
         -1.0604e-01, -9.1197e-03, -3.0156e-02,  6.5540e-02,  5.0515e-02,
         -9.9385e-02, -1.8042e-02,  1.1137e-02, -1.0821e-01, -6.7553e-02,
          6.4620e-02, -3.5007e-02, -3.5723e-02, -3.0226e-02,  1.3148e-02,
          9.5499e-03,  5.0622e-02, -5.3581e-02,  6.0103e-02,  5.8127e-02,
          2.1436e-02, -2.8735e-03, -6.2011e-02,  3.4153e-02, -3.5671e-02,
         -7.7428e-02,  1.8291e-02, -1.0110e-02, -3.1586e-03, -2.7310e-02,
          8.6027e-02, -5.7814e-02, -7.1120e-02,  3.8070e-03, -5.3865e-02,
         -4.7968e-02,  7.1088e-02,  6.0047e-02,  2.0953e-02,  1.8364e-02,
          3.2833e-03,  2.1299e-02,  4.2826e-02, -6.3478e-02, -7.7036e-02,
         -4.0793e-02, -4.6650e-02,  3.3771e-02,  6.4751e-02,  1.4458e-02,
          6.6982e-04,  6.8680e-03,  5.7353e-03,  1.4055e-03, -1.3024e-01,
          1.3728e-02, -5.4588e-02, -9.2843e-03,  4.6843e-02,  1.2380e-02,
         -1.0132e-01, -1.0143e-01,  1.2993e-03, -4.6495e-02, -3.3817e-02,
          5.3756e-02,  2.9237e-03, -7.0712e-02,  1.0016e-02,  4.0554e-03,
          7.3676e-02,  3.7176e-02,  1.4179e-02,  4.7066e-02, -2.3417e-02,
          2.7539e-02,  1.8199e-02,  5.4748e-33,  6.1741e-02, -2.8230e-03,
         -1.4874e-02, -1.7939e-02, -1.2965e-01,  3.4599e-02, -3.2036e-02,
         -2.5572e-04, -6.9266e-02, -7.3597e-03,  8.2146e-03, -6.7812e-03,
          2.2836e-02, -3.4310e-02,  2.0011e-02,  3.1459e-02,  7.7769e-03,
         -5.1860e-02,  5.6623e-03,  1.1469e-01,  2.1533e-02,  6.5941e-02,
         -1.0408e-01,  1.3562e-01,  1.7390e-02, -3.6148e-02, -2.8789e-04,
          4.4701e-02, -3.9812e-02, -3.5963e-02,  2.5937e-02, -5.0274e-02,
         -6.0249e-02,  2.0889e-03, -2.5580e-02, -1.1205e-01,  2.8974e-02,
          7.1822e-02,  8.3787e-02,  5.7532e-02,  5.4815e-02, -7.3174e-02,
          6.1907e-02,  1.7955e-02,  7.0563e-02, -1.3327e-02, -3.5396e-02,
          2.2297e-02,  3.4801e-02, -3.5133e-03, -5.9578e-02, -2.3430e-02,
         -1.9720e-02,  6.6439e-02,  3.4957e-02,  4.2301e-03, -4.2383e-02,
          4.5369e-02, -2.4235e-02, -7.8198e-02,  9.1515e-03, -3.6467e-02,
          1.2931e-02, -6.5846e-03,  4.1799e-02, -6.6055e-02, -1.9984e-02,
          3.4054e-02,  4.6504e-02,  2.4857e-02, -7.7289e-02, -2.7075e-02,
          5.1627e-02,  1.8795e-02, -8.6483e-02, -2.5165e-02, -6.4756e-02,
          1.8385e-02, -6.3522e-02,  7.3602e-02, -1.2485e-01,  3.1066e-02,
          2.0630e-02,  5.1326e-02, -2.2810e-02,  6.1732e-02,  1.3642e-02,
         -5.5737e-02, -3.4860e-02,  3.5191e-03, -9.8149e-02, -2.3081e-02,
          5.1162e-02,  2.3710e-02,  2.6427e-02, -6.7771e-33,  7.2159e-02,
         -1.6481e-02, -3.6207e-02,  3.8085e-02, -3.4602e-02,  8.6334e-02,
          1.5114e-02,  3.9200e-02, -3.1850e-02,  5.3691e-02,  8.1287e-02,
         -8.6241e-02, -5.8836e-03,  8.6479e-03, -1.4101e-02,  5.8013e-02,
          6.8926e-02,  1.4220e-02, -9.2280e-02, -3.9408e-02, -6.5931e-02,
          3.6869e-02, -4.5336e-02,  3.7544e-02,  5.9382e-03,  8.1003e-03,
          1.4127e-01, -2.4009e-03, -6.2618e-02,  4.6379e-02,  2.3328e-02,
         -4.4860e-02, -3.6537e-02,  9.8303e-02, -1.1302e-02, -1.9549e-02,
          2.7585e-02, -1.6344e-02, -7.8398e-02,  3.3743e-02,  4.0796e-03,
          2.3055e-02,  3.0121e-02,  3.5273e-02,  6.1595e-03, -4.6779e-02,
         -9.5494e-02, -5.5244e-02, -2.2123e-02, -8.6968e-02,  8.1632e-02,
          3.7268e-02, -5.6337e-02, -3.7504e-02,  3.9883e-02,  2.1665e-02,
         -1.1715e-03, -1.1433e-02,  1.1011e-01,  1.7547e-02,  4.1762e-02,
         -2.7304e-02,  5.8663e-03, -6.3399e-02, -3.5626e-02,  2.9627e-02,
         -6.2117e-02,  3.6883e-02,  7.6135e-02, -1.8937e-02,  6.0765e-02,
         -1.7487e-02,  5.8139e-02,  8.1477e-02, -6.2627e-02,  2.2173e-02,
         -6.9863e-02,  1.3734e-01,  6.3922e-02,  5.8755e-02, -8.2508e-03,
         -4.9136e-02, -1.9317e-02, -3.5932e-02, -2.1635e-03, -9.1685e-02,
         -7.4547e-02,  1.0171e-02,  4.5035e-02, -7.7902e-02,  1.9433e-02,
         -7.5155e-03,  1.7993e-02,  6.6654e-03,  4.8302e-02, -3.0489e-08,
          7.0086e-02, -1.0560e-01, -4.8726e-02,  3.4356e-02, -4.6604e-02,
         -7.7619e-02,  6.0166e-02, -3.6233e-02, -1.4290e-01,  1.9578e-02,
         -8.9281e-03, -3.9778e-02, -4.8754e-02,  8.0470e-02, -3.3302e-02,
         -6.2977e-03,  1.1852e-02,  1.4399e-01, -3.3058e-02, -3.1790e-02,
          3.0662e-02, -7.3438e-02, -3.3702e-02, -4.7669e-02, -6.0677e-02,
          5.5177e-02,  2.7003e-02, -3.5239e-02,  4.8671e-02, -7.4209e-02,
          1.6665e-03,  3.6931e-02,  4.3741e-03, -4.3197e-02, -5.9318e-03,
          2.8414e-02,  5.1709e-02,  1.3871e-02, -5.9853e-02,  3.7960e-02,
          5.1162e-02, -2.9222e-02, -5.5425e-02,  1.4154e-02,  2.9678e-02,
         -7.4006e-02,  2.3232e-02, -1.6394e-02, -2.0668e-02, -1.9157e-02,
          2.8177e-02,  5.4864e-02, -1.2764e-02,  3.7095e-02, -5.4692e-02,
          6.5493e-02, -1.1707e-02, -3.8507e-02, -4.5836e-02, -3.2941e-02,
         -1.8714e-02,  1.0664e-02,  4.8238e-02, -7.9246e-02]])
tensor([])
Answer from model: Производственный работник.
tensor([0.5328])
Answer from model: Градск, ул. Ленина 22.
tensor([0.5483, 0.8426]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.']
Какой адрес вашего завода?
MODEL: ул. Ленина 22, Градск.

tensor([0.5872, 0.7918]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.']



Где находится ваш завод?
DATABASE: Градск, ул. Ленина 22.

tensor([0.5328, 1.0000, 0.7918]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.']



Какое местоположение вашего завода?
MODEL: ул. Ленина 22, Градск.

tensor([0.5784, 0.6961, 0.8269]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.']



Где точно находится ваш завод?
DATABASE: Градск, ул. Ленина 22.

tensor([0.5458, 0.9747, 0.8054, 0.7293]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.']



Как добраться до вашего завода?
MODEL: автобус номер 666.

tensor([0.6010, 0.6701, 0.8158, 0.7630]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.']



Как мне добраться до вашего завода?
DATABASE: автобус номер 666.

tensor([0.6152, 0.6675, 0.8081, 0.8158, 0.9765]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.']



На каком автобусе добраться до вашего завода?
DATABASE: автобус номер 666.

tensor([0.5839, 0.6635, 0.8000, 0.7550, 0.9237]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.']



Какие автобусы едут до вашего завода?
DATABASE: ул. Ленина 22, Градск.

tensor([0.6011, 0.7383, 0.8731, 0.7897, 0.8488]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.']



Что производят на вашем заводе?
MODEL: Свечи различных размеров и форм.

tensor([0.4930, 0.7891, 0.8136, 0.7772, 0.7597]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.']



Какая продукция производится на вашем заводе?
DATABASE: Свечи различных размеров и форм.

tensor([0.5188, 0.7697, 0.8240, 0.7599, 0.7470, 0.8419]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.']



Какие товары производятся на вашем заводе?
DATABASE: Свечи различных размеров и форм.

tensor([0.5842, 0.7822, 0.8468, 0.7719, 0.7878, 0.8998]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.']



Что именно производится на вашем заводе?
DATABASE: Свечи различных размеров и форм.

tensor([0.5101, 0.7762, 0.7986, 0.7977, 0.7085, 0.9442]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.']



Какие изделия производятся на вашем заводе?
DATABASE: Свечи различных размеров и форм.

tensor([0.5260, 0.7231, 0.7775, 0.7057, 0.7011, 0.8340]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.']



Какую продукцию я могу найти на вашем заводе?
MODEL: свечи различных размеров и форм.

tensor([0.5086, 0.7488, 0.7753, 0.7913, 0.7304, 0.7520]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.']



Какик работники вам нужны?
MODEL: Свечники 6 разряда, 25 лет опыта.

tensor([0.7862, 0.4621, 0.5546, 0.6205, 0.6056, 0.4468, 0.5529]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.']



Какие должности вы ищете?
DATABASE: Производственный работник.

tensor([0.8478, 0.5497, 0.5990, 0.6549, 0.5806, 0.5151, 0.5273, 0.7098]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.']



Какие работники вам нужны в данный момент?
DATABASE: Свечники 6 разряда, 25 лет опыта.

tensor([0.7339, 0.4591, 0.5453, 0.6403, 0.6044, 0.4584, 0.5851, 0.9199]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.']



Какие специалисты вам требуются?
MODEL: Свечник 6 разряда.

tensor([0.6334, 0.5065, 0.5338, 0.6233, 0.5803, 0.4454, 0.6344, 0.6348]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.']



Какие специалисты вам необходимы?
DATABASE: Свечник 6 разряда.

tensor([0.6568, 0.5943, 0.5778, 0.6298, 0.5441, 0.4933, 0.6542, 0.6733, 0.8363]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.']



Какими навыками и умениями должен обладать специалист?
MODEL: 6 разряд свечник, 25 лет опыта.

tensor([0.5752, 0.4921, 0.5258, 0.5898, 0.4993, 0.4510, 0.5982, 0.6245, 0.6663]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.']



Какие компетенции и знания необходимы специалисту?
DATABASE: 6 разряд свечник, 25 лет опыта.

tensor([0.5514, 0.4911, 0.5040, 0.5904, 0.4124, 0.3979, 0.5825, 0.5210, 0.7093,
        0.8410]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.']



Какими навыками и качествами должен владеть специалист для успешного выполнения работы?
DATABASE: 6 разряд свечник, 25 лет опыта.

tensor([0.5847, 0.4809, 0.5222, 0.6287, 0.5266, 0.4616, 0.5786, 0.6054, 0.6994,
        0.8734]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.']



Какие специфические умения и опыт требуются у специалиста?
MODEL: 6 разряд свечника, 25 лет опыта.

tensor([0.4781, 0.3292, 0.3283, 0.4622, 0.3640, 0.2686, 0.4337, 0.4265, 0.7445,
        0.7263]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.']



Сколько платят на этой должности?
MODEL: 150 тысяч рублей в месяц.

tensor([0.5761, 0.4728, 0.5370, 0.6177, 0.5699, 0.5155, 0.5279, 0.6499, 0.6266,
        0.6051, 0.4837]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.']



Какова зарплата для этой должности?
MODEL: 150 тысяч рублей в месяц.

tensor([0.6317, 0.5361, 0.6603, 0.7508, 0.7015, 0.6136, 0.6076, 0.6484, 0.6931,
        0.6513, 0.5353, 0.8170]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.']



Какая заработная плата предлагается на этой позиции?
MODEL: 150 тысяч рублей в месяц.

tensor([0.5333, 0.5664, 0.6056, 0.6260, 0.6490, 0.6356, 0.6936, 0.5238, 0.7002,
        0.5918, 0.5268, 0.7472, 0.7504]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.']



Какие условия оплаты труда установлены для этой работы?
MODEL: 150 тысяч рублей в месяц.

tensor([0.6649, 0.4419, 0.5366, 0.5647, 0.5835, 0.4475, 0.5419, 0.6073, 0.7307,
        0.7034, 0.7294, 0.6140, 0.7315, 0.6665]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.']



Какие варианты и размеры заработной платы доступны для этой должности?
MODEL: 150 тысяч рублей в месяц.

tensor([0.6315, 0.4627, 0.5762, 0.6694, 0.6141, 0.5366, 0.5617, 0.7281, 0.6825,
        0.6369, 0.5703, 0.7286, 0.8285, 0.7158, 0.7480]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.']



Какая зарплата ожидается для новых сотрудников на этой позиции?
DATABASE: 150 тысяч рублей в месяц.

tensor([0.5895, 0.6016, 0.6208, 0.6748, 0.5762, 0.6107, 0.6586, 0.5782, 0.6606,
        0.6585, 0.5807, 0.7454, 0.8766, 0.7945, 0.7136, 0.7567]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.']



Как устроиться?
MODEL: Пришли на собеседование.

tensor([0.6569, 0.5397, 0.6537, 0.5785, 0.6697, 0.4949, 0.5600, 0.6384, 0.7216,
        0.5108, 0.5426, 0.5937, 0.6290, 0.6079, 0.6429, 0.6018]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', 'Пришли на собеседование.']



Как можно устроиться к вам на работу?
MODEL: Заполните анкету и предоставьте резюме.

tensor([0.6772, 0.5174, 0.6160, 0.7156, 0.7407, 0.5540, 0.6689, 0.8023, 0.7281,
        0.6131, 0.5395, 0.6568, 0.6658, 0.6477, 0.6743, 0.7138, 0.7764]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', 'Пришли на собеседование.', 'Заполните анкету и предоставьте резюме.']



Какой процесс приема?
MODEL: Процесс приема - заполнение анкеты, предоставление резюме, собеседование.

tensor([0.5919, 0.5069, 0.6468, 0.6108, 0.5748, 0.4891, 0.6374, 0.5853, 0.7142,
        0.6889, 0.5684, 0.5701, 0.6417, 0.6766, 0.6096, 0.6451, 0.6857, 0.6480]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', 'Пришли на собеседование.', 'Заполните анкету и предоставьте резюме.', 'Процесс приема - заполнение анкеты, предоставление резюме, собеседование.']



Какой процесс приема на работу на вашем заводе?
DATABASE: свечи различных размеров и форм.

tensor([0.6088, 0.6495, 0.7539, 0.7817, 0.7913, 0.7558, 0.8342, 0.6714, 0.6616,
        0.6607, 0.4892, 0.5964, 0.6903, 0.7486, 0.6294, 0.7086, 0.5670, 0.7947,
        0.7305]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', 'Пришли на собеседование.', 'Заполните анкету и предоставьте резюме.', 'Процесс приема - заполнение анкеты, предоставление резюме, собеседование.']



Как я могу подать заявку на работу на вашем заводе?
DATABASE: свечи различных размеров и форм.

tensor([0.5425, 0.6872, 0.7632, 0.7814, 0.8492, 0.7952, 0.8563, 0.5977, 0.5584,
        0.5022, 0.3600, 0.5374, 0.6149, 0.6558, 0.5424, 0.5523, 0.5733, 0.7463,
        0.4913]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', 'Пришли на собеседование.', 'Заполните анкету и предоставьте резюме.', 'Процесс приема - заполнение анкеты, предоставление резюме, собеседование.']



Какие шаги мне нужно предпринять, чтобы устроиться к вам на завод?
MODEL: Заполните анкету и предоставьте резюме.

tensor([0.5690, 0.7218, 0.7772, 0.7755, 0.7494, 0.7674, 0.7811, 0.5979, 0.6229,
        0.5315, 0.4325, 0.5885, 0.6900, 0.7097, 0.5534, 0.6632, 0.7052, 0.7115,
        0.6385]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', 'Пришли на собеседование.', 'Заполните анкету и предоставьте резюме.', 'Процесс приема - заполнение анкеты, предоставление резюме, собеседование.', 'Заполните анкету и предоставьте резюме.']



Какие документы и информацию мне необходимо предоставить для трудоустройства на вашем заводе?
MODEL: Предоставьте анкету, резюме и удостоверение о 6-разрядном свечнике.

tensor([0.5497, 0.6614, 0.6976, 0.6971, 0.7302, 0.6785, 0.7391, 0.5592, 0.5795,
        0.6382, 0.5247, 0.5387, 0.6449, 0.5832, 0.5450, 0.6536, 0.4924, 0.5958,
        0.5939, 0.6998]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', 'Пришли на собеседование.', 'Заполните анкету и предоставьте резюме.', 'Процесс приема - заполнение анкеты, предоставление резюме, собеседование.', 'Заполните анкету и предоставьте резюме.', 'Предоставьте анкету, резюме и удостоверение о 6-разрядном свечнике.']



Какие дополнительные льготы и привилегии предоставляются?
MODEL: Дополнительные льготы и привилегии не указаны.

tensor([0.5427, 0.5126, 0.5350, 0.5718, 0.5373, 0.4733, 0.5275, 0.4607, 0.6539,
        0.5549, 0.5765, 0.6076, 0.6627, 0.6229, 0.5860, 0.6509, 0.5958, 0.4810,
        0.5889, 0.6542, 0.6416]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', 'Пришли на собеседование.', 'Заполните анкету и предоставьте резюме.', 'Процесс приема - заполнение анкеты, предоставление резюме, собеседование.', 'Заполните анкету и предоставьте резюме.', 'Предоставьте анкету, резюме и удостоверение о 6-разрядном свечнике.', 'Дополнительные льготы и привилегии не указаны.']



Какие бонусы и вознаграждения доступны для сотрудников?
MODEL: медицинское страхование, абонемент в бассейн.

tensor([0.6390, 0.4709, 0.5653, 0.5710, 0.5554, 0.4117, 0.4840, 0.6261, 0.6022,
        0.6801, 0.6312, 0.5246, 0.6556, 0.4396, 0.7235, 0.6578, 0.5916, 0.5396,
        0.6075, 0.5433, 0.6206, 0.6431]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', 'Пришли на собеседование.', 'Заполните анкету и предоставьте резюме.', 'Процесс приема - заполнение анкеты, предоставление резюме, собеседование.', 'Заполните анкету и предоставьте резюме.', 'Предоставьте анкету, резюме и удостоверение о 6-разрядном свечнике.', 'Дополнительные льготы и привилегии не указаны.', 'медицинское страхование, абонемент в бассейн.']



Какие дополнительные преимущества и поощрения предусмотрены?
MODEL: Дополнительные преимущества и поощрения не указаны.

tensor([0.6690, 0.4148, 0.4737, 0.5297, 0.4620, 0.4404, 0.4290, 0.4457, 0.5047,
        0.6057, 0.5946, 0.4905, 0.5728, 0.4793, 0.6065, 0.6134, 0.4838, 0.4360,
        0.6190, 0.5306, 0.5876, 0.7272, 0.7166]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', 'Пришли на собеседование.', 'Заполните анкету и предоставьте резюме.', 'Процесс приема - заполнение анкеты, предоставление резюме, собеседование.', 'Заполните анкету и предоставьте резюме.', 'Предоставьте анкету, резюме и удостоверение о 6-разрядном свечнике.', 'Дополнительные льготы и привилегии не указаны.', 'медицинское страхование, абонемент в бассейн.', 'Дополнительные преимущества и поощрения не указаны.']



Какие бонусные программы и возможности для получения дополнительных выгод имеются?
MODEL: Медицинское страхование, абонемент в бассейн.

tensor([0.5111, 0.4287, 0.4577, 0.5366, 0.4675, 0.4201, 0.4801, 0.5164, 0.5183,
        0.6147, 0.5753, 0.4910, 0.5235, 0.4689, 0.5816, 0.6455, 0.4165, 0.4737,
        0.6047, 0.5567, 0.6186, 0.6770, 0.8013, 0.7390]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', 'Пришли на собеседование.', 'Заполните анкету и предоставьте резюме.', 'Процесс приема - заполнение анкеты, предоставление резюме, собеседование.', 'Заполните анкету и предоставьте резюме.', 'Предоставьте анкету, резюме и удостоверение о 6-разрядном свечнике.', 'Дополнительные льготы и привилегии не указаны.', 'медицинское страхование, абонемент в бассейн.', 'Дополнительные преимущества и поощрения не указаны.', 'Медицинское страхование, абонемент в бассейн.']



Какие дополнительные бонусы и компенсации предлагаются в рамках трудовых условий?
MODEL: Медицинское страхование, абонемент в бассейн.

tensor([0.5857, 0.4403, 0.4879, 0.5273, 0.4173, 0.3248, 0.4934, 0.5114, 0.6618,
        0.6396, 0.6420, 0.4994, 0.6327, 0.5350, 0.6831, 0.6403, 0.5362, 0.4939,
        0.6591, 0.5238, 0.6097, 0.7753, 0.8060, 0.6788, 0.7343]) answers=['Производственный работник.', 'Градск, ул. Ленина 22.', 'ул. Ленина 22, Градск.', 'ул. Ленина 22, Градск.', 'автобус номер 666.', 'Свечи различных размеров и форм.', 'свечи различных размеров и форм.', 'Свечники 6 разряда, 25 лет опыта.', 'Свечник 6 разряда.', '6 разряд свечник, 25 лет опыта.', '6 разряд свечника, 25 лет опыта.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', '150 тысяч рублей в месяц.', 'Пришли на собеседование.', 'Заполните анкету и предоставьте резюме.', 'Процесс приема - заполнение анкеты, предоставление резюме, собеседование.', 'Заполните анкету и предоставьте резюме.', 'Предоставьте анкету, резюме и удостоверение о 6-разрядном свечнике.', 'Дополнительные льготы и привилегии не указаны.', 'медицинское страхование, абонемент в бассейн.', 'Дополнительные преимущества и поощрения не указаны.', 'Медицинское страхование, абонемент в бассейн.', 'Медицинское страхование, абонемент в бассейн.']

"""


'''

#функция для получения эмбеддингов. На вход подаём строку, на выходе получаем torch.tensor размерностью (1, 384):
def get_embedding(sentence):
    #Mean Pooling - Take attention mask into account for correct averaging
    def _mean_pooling(model_output, attention_mask):
        token_embeddings = model_output[0] #First element of model_output contains all token embeddings
        input_mask_expanded = attention_mask.unsqueeze(-1).expand(token_embeddings.size()).float()
        return torch.sum(token_embeddings * input_mask_expanded, 1) / torch.clamp(input_mask_expanded.sum(1), min=1e-9)

    # Tokenize sentences
    encoded_input = sent_tokenizer([sentence], padding=True, truncation=True, return_tensors='pt')

    # Compute token embeddings
    with torch.no_grad():
        model_output = sent_model(**encoded_input)

    # Perform pooling
    sentence_embeddings = _mean_pooling(model_output, encoded_input['attention_mask'])

    # Normalize embeddings
    sentence_embeddings = F.normalize(sentence_embeddings, p=2, dim=1)

    return sentence_embeddings

GPT-4o mini


Ваш код для получения эмбеддингов выглядит хорошо. Он использует метод "Mean Pooling" для усреднения токенов с учетом маски внимания, что позволяет получить более точное представление предложения. Вот краткое объяснение каждого шага:

Функция _mean_pooling: Эта функция принимает выходные данные модели и маску внимания, чтобы усреднить эмбеддинги токенов. Она умножает эмбеддинги токенов на маску внимания, чтобы игнорировать паддинги, и затем усредняет их.
Токенизация: Входное предложение токенизируется с использованием sent_tokenizer, который, вероятно, является экземпляром токенизатора, соответствующего вашей модели. Параметры padding=True и truncation=True обеспечивают правильную длину входных данных.
Получение эмбеддингов: С помощью модели sent_model вычисляются эмбеддинги токенов. Использование torch.no_grad() отключает вычисление градиентов, что экономит память и ускоряет процесс.
Пулинг: Полученные эмбеддинги токенов обрабатываются с помощью функции _mean_pooling, чтобы получить одно векторное представление для всего предложения.
Нормализация: Эмбеддинги нормализуются с использованием L2-нормы, что может быть полезно для последующих вычислений, таких как сравнение схожести.
Возврат результата: Функция возвращает тензор размерности (1, 384), что соответствует ожидаемому формату.
Если у вас есть конкретные вопросы или вам нужно что-то изменить в этой функции, дайте знать!

почему Функция возвращает тензор размерности (1, 384)?

GPT-4o mini


Функция возвращает тензор размерности (1, 384) по следующим причинам:

Размерность эмбеддингов: Ваша модель, вероятно, генерирует эмбеддинги размерности 384 для каждого предложения. Это может зависеть от архитектуры модели, которую вы используете (например, модели на основе BERT, RoBERTa и т.д.). Размерность 384 указывает на то, что векторное представление предложения состоит из 384 чисел, которые описывают его семантические характеристики.
Формат вывода: Функция get_embedding принимает одно предложение и возвращает его эмбеддинг в виде тензора. Поскольку вы передаете одно предложение, выходной тензор имеет размерность (1, 384), где:
1 — это количество предложений (в данном случае одно),
384 — это размерность эмбеддинга.
Использование torch.tensor: В PyTorch, когда вы создаете тензор с одной строкой (например, с помощью torch.sum или других операций), результат будет иметь размерность, соответствующую количеству строк и столбцов. В данном случае, поскольку вы обрабатываете одно предложение, результат будет иметь размерность (1, 384).
Если вы хотите получить эмбеддинг для нескольких предложений, вы можете изменить входные данные функции, чтобы передать список предложений, и тогда выходной тензор будет иметь размерность (N, 384), где N — количество предложений.

почему такое значение для 384 — это размерность эмбеддинга

GPT-4o mini


Размерность эмбеддинга, равная 384, определяется архитектурой и конфигурацией конкретной модели, которую вы используете для генерации эмбеддингов. Вот несколько причин, почему именно 384:

Архитектура модели: Многие предобученные модели, такие как BERT, RoBERTa, и их производные, имеют фиксированную размерность выходных эмбеддингов. Например, BERT-base имеет размерность эмбеддингов 768, а BERT-base-uncased имеет 768. Однако, если вы используете другую модель, например, DistilBERT или специфическую версию модели, размерность может быть другой. Некоторые модели могут быть настроены на меньшую размерность для уменьшения вычислительных затрат.
Настройка модели: Если вы используете кастомную модель или модель, которая была дообучена на вашем наборе данных, размерность эмбеддингов может быть изменена в процессе обучения. Например, при дообучении модели на специфических задачах, таких как классификация текстов или извлечение информации, размерность эмбеддингов может быть уменьшена или увеличена в зависимости от требований задачи.
Выбор гиперпараметров: При создании модели разработчики могут выбирать размерность эмбеддингов как гиперпараметр. Это может зависеть от доступных вычислительных ресурсов, объема данных для обучения и желаемой производительности модели.
Стандарты и практики: В некоторых случаях размерность эмбеддингов может быть выбрана на основе стандартов в области обработки естественного языка (NLP) или на основе эмпирических исследований, показывающих, что определенная размерность обеспечивает хорошее качество представления без чрезмерного увеличения вычислительных затрат.
Если вы хотите узнать точную причину, почему ваша модель имеет размерность 384, вам следует обратиться к документации или исходному коду модели, которую вы используете.

как переписать код для того чтобы передать список предложений, и тогда выходной тензор будет иметь размерность (N, 384), где N — количество предложений.

GPT-4o mini



Чтобы изменить вашу функцию get_embedding так, чтобы она могла обрабатывать список предложений и возвращать тензор размерности (N, 384), вам нужно внести несколько изменений. Вот обновленный код:

python

Copy Code
import torch
import torch.nn.functional as F

# Функция для получения эмбеддингов
def get_embedding(sentences):
    # Mean Pooling - Take attention mask into account for correct averaging
    def _mean_pooling(model_output, attention_mask):
        token_embeddings = model_output[0]  # Первое значение model_output содержит все эмбеддинги токенов
        input_mask_expanded = attention_mask.unsqueeze(-1).expand(token_embeddings.size()).float()
        return torch.sum(token_embeddings * input_mask_expanded, 1) / torch.clamp(input_mask_expanded.sum(1), min=1e-9)

    # Токенизация предложений
    encoded_input = sent_tokenizer(sentences, padding=True, truncation=True, return_tensors='pt')

    # Вычисление эмбеддингов токенов
    with torch.no_grad():
        model_output = sent_model(**encoded_input)

    # Выполнение пулинга
    sentence_embeddings = _mean_pooling(model_output, encoded_input['attention_mask'])

    # Нормализация эмбеддингов
    sentence_embeddings = F.normalize(sentence_embeddings, p=2, dim=1)

    return sentence_embeddings

# Пример использования
sentences = ["Это первое предложение.", "Это второе предложение.", "Это третье предложение."]
embeddings = get_embedding(sentences)
print(embeddings.shape)  # Должно вывести: torch.Size([3, 384])
Изменения в коде:
Изменение параметра функции: Теперь функция принимает sentences, который является списком строк (предложений).
Токенизация: Вызов sent_tokenizer теперь принимает список предложений, что позволяет токенизировать все предложения одновременно.
Возврат эмбеддингов: После выполнения пулинга и нормализации функция возвращает тензор, который будет иметь размерность (N, 384), где N — количество предложений в списке.
Теперь вы можете передавать список предложений в функцию, и она будет возвращать соответствующие эмбеддинги для каждого из них.

'''